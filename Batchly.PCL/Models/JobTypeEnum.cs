/*
 * Batchly.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/19/2016
 */
using System;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Batchly.PCL;

namespace Batchly.PCL.Models
{
    [JsonConverter(typeof(StringValuedEnumConverter))]
    public enum JobTypeEnum
    {
        ALL, //TODO: Write general description for this method
        UNITOFWORK, //TODO: Write general description for this method
        MAPREDUCE, //TODO: Write general description for this method
        SPOTSCALER, //TODO: Write general description for this method
        JMETER, //TODO: Write general description for this method
        CLUSTER, //TODO: Write general description for this method
    }

    /// <summary>
    /// Helper for the enum type JobTypeEnum
    /// </summary>
    public static class JobTypeEnumHelper
    {
        //string values corresponding the enum elements
        private static List<string> stringValues = new List<string> { "All", "UnitOfWork", "MapReduce", "SpotScaler", "JMeter", "Cluster" };

        /// <summary>
        /// Converts a JobTypeEnum value to a corresponding string value
        /// </summary>
        /// <param name="enumValue">The JobTypeEnum value to convert</param>
        /// <returns>The representative string value</returns>
        public static string ToValue(JobTypeEnum enumValue)
        {
            switch(enumValue)
            {
                //only valid enum elements can be used
                //this is necessary to avoid errors
                case JobTypeEnum.ALL:
                case JobTypeEnum.UNITOFWORK:
                case JobTypeEnum.MAPREDUCE:
                case JobTypeEnum.SPOTSCALER:
                case JobTypeEnum.JMETER:
                case JobTypeEnum.CLUSTER:
                    return stringValues[(int)enumValue];

                //an invalid enum value was requested
                default:
                    return null;
            }
        }

        /// <summary>
        /// Convert a list of JobTypeEnum values to a list of strings
        /// </summary>
        /// <param name="enumValues">The list of JobTypeEnum values to convert</param>
        /// <returns>The list of representative string values</returns>
        public static List<string> ToValue(List<JobTypeEnum> enumValues)
        {
            if (null == enumValues)
                return null;

            return enumValues.Select(eVal => ToValue(eVal)).ToList();
        }

        /// <summary>
        /// Converts a string value into JobTypeEnum value
        /// </summary>
        /// <param name="value">The string value to parse</param>
        /// <returns>The parsed JobTypeEnum value</returns>
        public static JobTypeEnum ParseString(string value)
        {
            int index = stringValues.IndexOf(value);
            if(index < 0)
                throw new InvalidCastException(string.Format("Unable to cast value: {0} to type JobTypeEnum", value));

            return (JobTypeEnum) index;
        }
    }
} 