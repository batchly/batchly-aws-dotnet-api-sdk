/*
 * Batchly.Api
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/19/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Batchly.Api;
using Batchly.Api.Http.Request;
using Batchly.Api.Http.Response;
using Batchly.Api.Http.Client;
using Batchly.Api.Exceptions;
using Batchly.Api.Models;

namespace Batchly.Api.Controllers
{
    public partial class ProjectsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static ProjectsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static ProjectsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new ProjectsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseProjectModel response from the API call</return>
        public ApiResponseProjectModel UpdateProject(string id, UpdateProjectRequest request)
        {
            Task<ApiResponseProjectModel> t = UpdateProjectAsync(id, request);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseProjectModel response from the API call</return>
        public async Task<ApiResponseProjectModel> UpdateProjectAsync(string id, UpdateProjectRequest request)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/Projects/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
           HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);

            else if (_response.StatusCode == 404)
                throw new APIException(@"NotFound", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseProjectModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="requestContinuationToken">Optional parameter: Example: </param>
        /// <param name="requestFilters">Optional parameter: Example: </param>
        /// <return>Returns the ApiResponseListProjectModel response from the API call</return>
        public ApiResponseListProjectModel ListProjects(string requestContinuationToken = null, object requestFilters = null)
        {
            Task<ApiResponseListProjectModel> t = ListProjectsAsync(requestContinuationToken, requestFilters);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="requestContinuationToken">Optional parameter: Example: </param>
        /// <param name="requestFilters">Optional parameter: Example: </param>
        /// <return>Returns the ApiResponseListProjectModel response from the API call</return>
        public async Task<ApiResponseListProjectModel> ListProjectsAsync(string requestContinuationToken = null, object requestFilters = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/Projects");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "request.continuationToken", requestContinuationToken },
                { "request.filters", requestFilters }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseListProjectModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetProjectsListSecurityGroups(string id)
        {
            Task<dynamic> t = GetProjectsListSecurityGroupsAsync(id);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetProjectsListSecurityGroupsAsync(string id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/Projects/{id}/SecurityGroups");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="engine">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetProjectsListInstances(string id, EngineEnum engine)
        {
            Task<dynamic> t = GetProjectsListInstancesAsync(id, engine);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="engine">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetProjectsListInstancesAsync(string id, EngineEnum engine)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/Projects/{id}/Instances/{engine}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "engine", EngineEnumHelper.ToValue(engine) }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic AddProject(CreateProjectRequest request)
        {
            Task<dynamic> t = AddProjectAsync(request);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> AddProjectAsync(CreateProjectRequest request)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/Projects/Add");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseBoolean response from the API call</return>
        public ApiResponseBoolean DeleteProject(string id)
        {
            Task<ApiResponseBoolean> t = DeleteProjectAsync(id);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseBoolean response from the API call</return>
        public async Task<ApiResponseBoolean> DeleteProjectAsync(string id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/Projects/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"NotFound", _context);
            else if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseBoolean>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseGetProjectResponse response from the API call</return>
        public ApiResponseGetProjectResponse GetDescribeProject(string id)
        {
            Task<ApiResponseGetProjectResponse> t = GetDescribeProjectAsync(id);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseGetProjectResponse response from the API call</return>
        public async Task<ApiResponseGetProjectResponse> GetDescribeProjectAsync(string id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/Projects/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"NotFound", _context);
            else if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseGetProjectResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 