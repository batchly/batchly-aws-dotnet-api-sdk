/*
 * Batchly.Api
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/19/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Batchly.Api;
using Batchly.Api.Http.Request;
using Batchly.Api.Http.Response;
using Batchly.Api.Http.Client;
using Batchly.Api.Exceptions;
using Batchly.Api.Models;

namespace Batchly.Api.Controllers
{
    public partial class ProcessorsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static ProcessorsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static ProcessorsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new ProcessorsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseProcessorModel response from the API call</return>
        public ApiResponseProcessorModel GetDescribeApp(string id)
        {
            Task<ApiResponseProcessorModel> t = GetDescribeAppAsync(id);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseProcessorModel response from the API call</return>
        public async Task<ApiResponseProcessorModel> GetDescribeAppAsync(string id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/apps/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);
            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"NotFound", _context);
            else if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);


            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseProcessorModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="appId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseListString response from the API call</return>
        public ApiResponseListString ListParameters(string appId)
        {
            Task<ApiResponseListString> t = ListParametersAsync(appId);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="appId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseListString response from the API call</return>
        public async Task<ApiResponseListString> ListParametersAsync(string appId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/apps/{appId}/Parameters");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "appId", appId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);
            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseListString>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="accountid">Required parameter: Example: </param>
        /// <param name="file">Required parameter: File Contents</param>
        /// <return>Returns the string response from the API call</return>
        public string UploadFile(string accountid, FileStreamInfo file)
        {
            Task<string> t = UploadFileAsync(accountid, file);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="accountid">Required parameter: Example: </param>
        /// <param name="file">Required parameter: File Contents</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> UploadFileAsync(string accountid, FileStreamInfo file)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/apps/Upload");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountid", accountid }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "file", file }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);
            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="appId">Required parameter: Example: </param>
        /// <param name="profileId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseDescribeParameterGroupResponse response from the API call</return>
        public ApiResponseDescribeParameterGroupResponse GetDescribeProfile(string appId, string profileId)
        {
            Task<ApiResponseDescribeParameterGroupResponse> t = GetDescribeProfileAsync(appId, profileId);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="appId">Required parameter: Example: </param>
        /// <param name="profileId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseDescribeParameterGroupResponse response from the API call</return>
        public async Task<ApiResponseDescribeParameterGroupResponse> GetDescribeProfileAsync(string appId, string profileId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/apps/{appId}/Profiles/{profileId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "appId", appId },
                { "profileId", profileId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);
            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseDescribeParameterGroupResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="appId">Required parameter: Example: </param>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic AddProfile(string appId, AddParameterGroupRequest request)
        {
            Task<dynamic> t = AddProfileAsync(appId, request);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="appId">Required parameter: Example: </param>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> AddProfileAsync(string appId, AddParameterGroupRequest request)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/apps/{appId}/Profiles");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "appId", appId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);
            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="appId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseListParameterGroupModel response from the API call</return>
        public ApiResponseListParameterGroupModel ListProfiles(string appId)
        {
            Task<ApiResponseListParameterGroupModel> t = ListProfilesAsync(appId);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="appId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseListParameterGroupModel response from the API call</return>
        public async Task<ApiResponseListParameterGroupModel> ListProfilesAsync(string appId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/apps/{appId}/Profiles");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "appId", appId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);
            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseListParameterGroupModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseProcessorModel response from the API call</return>
        public ApiResponseProcessorModel AddPrivateApp(AddProcessorRequest request)
        {
            Task<ApiResponseProcessorModel> t = AddPrivateAppAsync(request);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="request">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseProcessorModel response from the API call</return>
        public async Task<ApiResponseProcessorModel> AddPrivateAppAsync(AddProcessorRequest request)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/apps/Private");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseProcessorModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <return>Returns the ApiResponseListProcessorModel response from the API call</return>
        public ApiResponseListProcessorModel ListAllPrivateApps()
        {
            Task<ApiResponseListProcessorModel> t = ListAllPrivateAppsAsync();
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <return>Returns the ApiResponseListProcessorModel response from the API call</return>
        public async Task<ApiResponseListProcessorModel> ListAllPrivateAppsAsync()
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/apps/Private");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseListProcessorModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseListProcessorModel response from the API call</return>
        public ApiResponseListProcessorModel ListPrivateApps(string accountId)
        {
            Task<ApiResponseListProcessorModel> t = ListPrivateAppsAsync(accountId);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponseListProcessorModel response from the API call</return>
        public async Task<ApiResponseListProcessorModel> ListPrivateAppsAsync(string accountId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/apps/Private/{accountId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseListProcessorModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <return>Returns the ApiResponseListProcessorModel response from the API call</return>
        public ApiResponseListProcessorModel ListMarketplaceApps()
        {
            Task<ApiResponseListProcessorModel> t = ListMarketplaceAppsAsync();
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <return>Returns the ApiResponseListProcessorModel response from the API call</return>
        public async Task<ApiResponseListProcessorModel> ListMarketplaceAppsAsync()
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/apps/Marketplace");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "batchly/1.0.5" },
                { "accept", "application/json" }
            };
             // _headers.Add("Api-Key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);
            //Custom Authentication to be added for authorization
            AuthUtility.AppendCustomAuthParams(_request);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new APIException(@"Validate Api keys", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Api key doesn't have required permission to execute operation", _context);

            else if (_response.StatusCode == 400)
                throw new APIException(@"Validation Error", _context);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ApiResponseListProcessorModel>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 