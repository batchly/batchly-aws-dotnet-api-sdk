/*
 * Batchly.Api
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/19/2016
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Batchly.Api;

namespace Batchly.Api.Models
{
    public class JobModel : INotifyPropertyChanged 
    {
        // These fields hold the values for the public properties.
        private double? runs;
        private bool? isScheduled;
        private bool? isExecuting;
        private EngineEnum? engine;
        private string appName;
        private bool? isPrivateApp;
        private string id;
        private string name;

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("Runs")]
        public double? Runs 
        { 
            get 
            {
                return this.runs; 
            } 
            set 
            {
                this.runs = value;
                onPropertyChanged("Runs");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("IsScheduled")]
        public bool? IsScheduled 
        { 
            get 
            {
                return this.isScheduled; 
            } 
            set 
            {
                this.isScheduled = value;
                onPropertyChanged("IsScheduled");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("IsExecuting")]
        public bool? IsExecuting 
        { 
            get 
            {
                return this.isExecuting; 
            } 
            set 
            {
                this.isExecuting = value;
                onPropertyChanged("IsExecuting");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("Engine", ItemConverterType = typeof(StringValuedEnumConverter))]
        public EngineEnum? Engine 
        { 
            get 
            {
                return this.engine; 
            } 
            set 
            {
                this.engine = value;
                onPropertyChanged("Engine");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("AppName")]
        public string AppName 
        { 
            get 
            {
                return this.appName; 
            } 
            set 
            {
                this.appName = value;
                onPropertyChanged("AppName");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("IsPrivateApp")]
        public bool? IsPrivateApp 
        { 
            get 
            {
                return this.isPrivateApp; 
            } 
            set 
            {
                this.isPrivateApp = value;
                onPropertyChanged("IsPrivateApp");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("Id")]
        public string Id 
        { 
            get 
            {
                return this.id; 
            } 
            set 
            {
                this.id = value;
                onPropertyChanged("Id");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("Name")]
        public string Name 
        { 
            get 
            {
                return this.name; 
            } 
            set 
            {
                this.name = value;
                onPropertyChanged("Name");
            }
        }

        /// <summary>
        /// Property changed event for observer pattern
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises event when a property is changed
        /// </summary>
        /// <param name="propertyName">Name of the changed property</param>
        protected void onPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
} 