/*
 * Batchly.Api
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/19/2016
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Batchly.Api;

namespace Batchly.Api.Models
{
    public class DescribeJMeterJobModel : INotifyPropertyChanged 
    {
        // These fields hold the values for the public properties.
        private string name;
        private string projectId;
        private string outputLocation;
        private string testPlan;
        private string instanceType;
        private int instanceCount;
        private string projectName;

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("Name")]
        public string Name 
        { 
            get 
            {
                return this.name; 
            } 
            set 
            {
                this.name = value;
                onPropertyChanged("Name");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("ProjectId")]
        public string ProjectId 
        { 
            get 
            {
                return this.projectId; 
            } 
            set 
            {
                this.projectId = value;
                onPropertyChanged("ProjectId");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("OutputLocation")]
        public string OutputLocation 
        { 
            get 
            {
                return this.outputLocation; 
            } 
            set 
            {
                this.outputLocation = value;
                onPropertyChanged("OutputLocation");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("TestPlan")]
        public string TestPlan 
        { 
            get 
            {
                return this.testPlan; 
            } 
            set 
            {
                this.testPlan = value;
                onPropertyChanged("TestPlan");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("InstanceType")]
        public string InstanceType 
        { 
            get 
            {
                return this.instanceType; 
            } 
            set 
            {
                this.instanceType = value;
                onPropertyChanged("InstanceType");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("InstanceCount")]
        public int InstanceCount 
        { 
            get 
            {
                return this.instanceCount; 
            } 
            set 
            {
                this.instanceCount = value;
                onPropertyChanged("InstanceCount");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("ProjectName")]
        public string ProjectName 
        { 
            get 
            {
                return this.projectName; 
            } 
            set 
            {
                this.projectName = value;
                onPropertyChanged("ProjectName");
            }
        }

        /// <summary>
        /// Property changed event for observer pattern
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises event when a property is changed
        /// </summary>
        /// <param name="propertyName">Name of the changed property</param>
        protected void onPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
} 